[
  {
    "id": "q001",
    "q": "Which command downloads providers and sets up the working directory?",
    "choices": [
      "terraform plan",
      "terraform init",
      "terraform apply",
      "terraform providers"
    ],
    "answer": [1],
    "explain": "`terraform init` initializes the directory and downloads required providers.",
    "tags": ["workflow"],
    "difficulty": "easy",
    "focus": "1.1",
    "category": "Terraform Basics"
  },
  {
    "id": "q002",
    "q": "What does Terraform state primarily track?",
    "choices": [
      "Variable defaults",
      "Resource dependencies",
      "The real-world resource attributes",
      "Terraform CLI version"
    ],
    "answer": [2],
    "explain": "State maps your configuration to real resources and stores their attributes.",
    "tags": ["state"],
    "difficulty": "medium",
    "focus": "1.2",
    "category": "State Management"
  },
  {
    "id": "q003",
    "q": "Best place to store remote state for team use?",
    "choices": [
      "Local disk",
      "Email attachment",
      "A supported backend like S3+lock or Terraform Cloud",
      "Inside Git"
    ],
    "answer": [2],
    "explain": "Use a remote backend with locking; never commit state to Git.",
    "tags": ["state", "backend"],
    "difficulty": "medium",
    "focus": "1.3",
    "category": "Backend Configuration"
  },
  {
    "id": "q004",
    "q": "How do you reference an input variable named `region`?",
    "choices": [
      "var.region",
      "local.region",
      "data.region",
      "terraform.region"
    ],
    "answer": [0],
    "explain": "Variables are referenced with the `var.` namespace.",
    "tags": ["hcl", "vars"],
    "difficulty": "easy",
    "focus": "2.1",
    "category": "Variables and Inputs"
  },
  {
    "id": "q005",
    "q": "Which meta-argument creates multiple similar resources from a map?",
    "choices": [
      "count",
      "for_each",
      "providers",
      "depends_on"
    ],
    "answer": [1],
    "explain": "`for_each` iterates over maps/sets and provides keys and values.",
    "tags": ["meta"],
    "difficulty": "hard",
    "focus": "3.2",
    "category": "Resource Management"
  },
  {
    "id": "q006",
    "q": "What file should be committed to lock provider versions?",
    "choices": [
      ".terraform/",
      " .terraform.tfstate",
      ".terraform.lock.hcl",
      "versions.tf"
    ],
    "answer": [2],
    "explain": "`.terraform.lock.hcl` records dependency selections and belongs in VCS.",
    "tags": ["providers"],
    "difficulty": "easy",
    "focus": "4.1",
    "category": "Provider Management"
  },
  {
    "id": "q007",
    "q": "What is the recommended way to pin a provider version?",
    "choices": [
      "In provider block with `version` or `required_providers`",
      "Set TF_PROVIDER env var",
      "Never pin versions",
      "Edit state file"
    ],
    "answer": [0],
    "explain": "Use `required_providers` or provider `version` constraints.",
    "tags": ["providers"],
    "difficulty": "medium",
    "focus": "4.2",
    "category": "Provider Management"
  },
  {
    "id": "q008",
    "q": "Which of the following are valid Terraform data source types? (Select all that apply)",
    "choices": [
      "aws_instance",
      "data.aws_ami",
      "local_file",
      "data.aws_vpc"
    ],
    "answer": [1, 3],
    "explain": "Data sources start with 'data.' prefix. aws_instance and local_file are resource types, not data sources.",
    "tags": ["data-sources", "aws"],
    "difficulty": "medium",
    "focus": "5.1",
    "category": "Data Sources",
    "multiple": true
  },
  {
    "id": "q009",
    "q": "What are the main benefits of using Terraform workspaces? (Select all that apply)",
    "choices": [
      "Environment isolation",
      "State separation",
      "Cost optimization",
      "Automatic backup"
    ],
    "answer": [0, 1],
    "explain": "Workspaces provide environment isolation and state separation. Cost optimization and automatic backup are not primary workspace features.",
    "tags": ["workspaces", "state"],
    "difficulty": "hard",
    "focus": "6.3",
    "category": "Workspace Management",
    "multiple": true
  },
  {
    "id": "q010",
    "q": "Which Terraform commands should be run in CI/CD pipelines? (Select all that apply)",
    "choices": [
      "terraform init",
      "terraform plan",
      "terraform apply",
      "terraform destroy"
    ],
    "answer": [0, 1],
    "explain": "In CI/CD, you typically run init and plan. Apply should be manual or require approval. Destroy should never be automated.",
    "tags": ["cicd", "automation"],
    "difficulty": "medium",
    "focus": "7.1",
    "category": "CI/CD Integration",
    "multiple": true
  }
]