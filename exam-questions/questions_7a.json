[
  {
    "id": "7a_001",
    "q": "What is the primary purpose of the default `local` backend in Terraform?",
    "choices": [
      "Store state locally on the machine running Terraform",
      "Store state in HashiCorp Cloud Platform",
      "Store state in AWS S3",
      "Distribute state across multiple team members automatically"
    ],
    "answer": [
      0
    ],
    "explain": "The local backend stores Terraform state files locally on the machine where Terraform is running, making it the default and simplest backend option.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "state"
    ],
    "difficulty": "easy",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_002",
    "q": "Where does the `local` backend store its state file by default?",
    "choices": [
      "./terraform.tfstate",
      "~/.terraform/state.json",
      "/var/lib/terraform/state.tfstate",
      "./state/local.tfstate"
    ],
    "answer": [
      0
    ],
    "explain": "The local backend stores state in `./terraform.tfstate` by default, which is in the current working directory.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "state",
      "file"
    ],
    "difficulty": "easy",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_003",
    "q": "Which of the following is TRUE about the `local` backend?",
    "choices": [
      "It supports team-based state locking",
      "It is the default backend if no backend is configured",
      "It encrypts state files automatically",
      "It requires network connectivity to operate"
    ],
    "answer": [
      1
    ],
    "explain": "The local backend is the default backend when no backend configuration is specified in Terraform.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "default"
    ],
    "difficulty": "easy",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_004",
    "q": "What is a major limitation of the `local` backend when used in a team environment?",
    "choices": [
      "It does not support remote state storage",
      "It does not support variables",
      "It cannot be used with AWS",
      "It requires a separate database"
    ],
    "answer": [
      0
    ],
    "explain": "The local backend stores state locally and cannot be shared between team members, making collaboration difficult.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "limitations",
      "team"
    ],
    "difficulty": "medium",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_005",
    "q": "How can you explicitly configure a `local` backend in Terraform?",
    "choices": [
      "backend \"local\" { path = \"terraform.tfstate\" }",
      "backend \"default\" {}",
      "backend \"filesystem\" {}",
      "backend \"file\" { location = \"./state\" }"
    ],
    "answer": [
      0
    ],
    "explain": "You can explicitly configure the local backend with a custom path using the path argument.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "configuration"
    ],
    "difficulty": "medium",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_006",
    "q": "Which backend type is recommended for collaborative work instead of the default `local` backend?",
    "choices": [
      "remote",
      "cloud",
      "s3",
      "All of the above"
    ],
    "answer": [
      3
    ],
    "explain": "All remote backends (remote, cloud, s3, etc.) are recommended for collaborative work as they support state sharing and locking.",
    "tags": [
      "terraform",
      "backend",
      "remote",
      "collaboration"
    ],
    "difficulty": "medium",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_007",
    "q": "When using the `local` backend, how is state locking handled?",
    "choices": [
      "State locking is not supported",
      "It uses a lock file in the `.terraform` directory",
      "It uses DynamoDB for locking",
      "It locks state in memory only"
    ],
    "answer": [
      0
    ],
    "explain": "The local backend does not support state locking, which can lead to state corruption in multi-user environments.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "locking",
      "state"
    ],
    "difficulty": "hard",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_008",
    "q": "Which of the following is NOT a valid reason to use the `local` backend?",
    "choices": [
      "You work alone and want simple local storage",
      "You want to avoid remote dependencies",
      "You need concurrent access from multiple team members",
      "You are testing a new Terraform module locally"
    ],
    "answer": [
      2
    ],
    "explain": "The local backend is not suitable for concurrent access from multiple team members as it lacks state locking and sharing capabilities.",
    "tags": [
      "terraform",
      "backend",
      "local",
      "use-cases"
    ],
    "difficulty": "medium",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_009",
    "q": "What happens to the state file when you switch from the `local` backend to a remote backend?",
    "choices": [
      "It is automatically migrated to the new backend",
      "It is deleted from the local directory",
      "It must be manually recreated",
      "Terraform ignores the old state file"
    ],
    "answer": [
      0
    ],
    "explain": "When switching backends, Terraform automatically migrates the existing state to the new backend location.",
    "tags": [
      "terraform",
      "backend",
      "migration",
      "state"
    ],
    "difficulty": "medium",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  },
  {
    "id": "7a_010",
    "q": "Which command is used to initialize a new backend configuration?",
    "choices": [
      "terraform backend init",
      "terraform init",
      "terraform backend configure",
      "terraform configure"
    ],
    "answer": [
      1
    ],
    "explain": "The `terraform init` command initializes the backend configuration and downloads necessary providers.",
    "tags": [
      "terraform",
      "backend",
      "init",
      "command"
    ],
    "difficulty": "easy",
    "focus": "7a",
    "category": "Backend Configuration",
    "multiple": false
  }
]